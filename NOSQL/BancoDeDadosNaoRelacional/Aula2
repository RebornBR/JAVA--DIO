use viagens; // ESPECIFICA O DATA BASE

db.createCollection("usuarios") // CRIA A COLLECTION 
db.createCollection("destinos")


// Ou vc pode inserir diretamente um documento e ele já ira criar a collection
db.usuarios_novo.insertOne({});

// Inserindo o primeiro documento
db.usuarios.insertOne( // INSERE UM ÚNICO DOCUMENTO 
    {   
        "nome": "nome",
        "data_nascimento": "1990-10-05",
        "email": "pamela.apolinario.borges@gmail.com",
        "endereco": "Av Manoel Marques de Jesus, 380 - Vila Xavier, Araraquara/SP"
    });

db.usuarios.insertMany([ // INSERE VARIOS DOCUMENTOS
    {   
        "nome": "Pamela",
        "idade": 30,
        "email": "pamela.apolinario.borges@gmail.com",
        "endereco": "Av Manoel Marques de Jesus, 380 - Vila Xavier, Araraquara/SP"
    },
    {   
        "nome": "Pamela",
        "idade": 31,
        "email": "pamela.apolinario.borges.outra@gmail.com",
        "endereco": "Av Manoel Marques de Jesus, 380 - Vila Xavier, Araraquara/SP"
    },

]);

db.destinos.insertOne({"nome":"Praia do Rosa", "descricao":"LInda praia"})


//Inserindo mais usuarios

// Inserir documentos na coleção "usuarios"
db.usuarios.insertMany([{
    nome: "João",
    idade: 25,
    cidade: "São Paulo",
    estado: "SP",
    endereco: {
      rua: "Avenida Principal",
      numero: 123,
      cidade: "São Paulo",
      estado: "SP"
    }
  }, {
    nome: "Maria",
    idade: 30,
    cidade: "Rio de Janeiro",
    estado: "RJ",
    endereco: {
      rua: "Rua Secundária",
      numero: 456,
      cidade: "Rio de Janeiro",
      estado: "RJ"
    }
},{
    nome: "Carlos",
    idade: 20,
    cidade: "São Paulo",
    estado: "SP",
    endereco: {
      rua: "Rua Principal",
      numero: 789,
      cidade: "São Paulo",
      estado: "SP"
    }
  },{
    nome: "Ana",
    idade: 35,
    cidade: "São Paulo",
    estado: "SP",
    endereco: {
      rua: "Avenida Secundária",
      numero: 1011,
      cidade: "São Paulo",
      estado: "SP"
    }
    }
    ,  
    {
    nome: "Pedro",
    idade: 28,
    cidade: "Belo Horizonte",
    estado: "MG",
    endereco: {
      rua: "Rua Principal",
      numero: 1314,
      cidade: "Belo Horizonte",
      estado: "MG"
    }
  }]);
  

// Find
db.usuarios.find({}); // retorna tudo de usuarios
db.usuarios.find({"nome": "João"});  // retorna usuarios com nome joão
db.usuarios.findOne({"nome": "João"}); // retorna apenas o primeiro usuario que for achado com o nome joão
db.usuarios.findOneAndUpdate({ nome: "João" }, { $set: { idade: 26 } }); // procura usuario com o nome João e muda($set) sua idade para 26
db.usuarios.findOneAndDelete({ nome: "João" }); // procura e deleta usuario com o nome joão

// Update
// o set pode ser usado para modificar o campo, mas tambem para criar um campo
db.usuarios.updateOne( // o primeiro usuario  com o nome joão tera sua idade trocada para 26 anos
  { nome: "João" },
  { $set: { idade: 26 } }
);

db.usuarios.updateMany( // todos usuarios que tenham a cidade de São Paulo, terão estado modificado para SP
  { cidade: "São Paulo" },
  { $set: { estado: "SP" } }
);
db.usuarios.replaceOne(
  { nome: "João" },
  {
    nome: "John",
    idade: 27,
    cidade: "São Paulo",
    estado: "SP",
    endereco: {
      rua: "Avenida Principal",
      numero: 123
    }
  }
);

// Update Operadores
// Usando o operador $set para definir o valor de um campo específico
db.usuarios.updateOne({ nome: "João" }, { $set: { idade: 26 } });

// Usando o operador $inc para incrementar o valor de um campo numérico
db.usuarios.updateOne({ nome: "João" }, { $inc: { idade: 1 } });

// Usando o operador $rename para renomear um campo existente
db.usuarios.updateOne({ nome: "João" }, { $rename: { "endereco.rua": "endereco.nomeRua" } });

// Usando o operador $unset para remover um campo específico de um documento
db.usuarios.updateOne({ nome: "João" }, { $unset: { endereco: "" } });
// podemos usar o push e não precisamos da chave({}) pois a informação é inserida diretamente

// Delete
// Usando o método deleteOne() para excluir o primeiro documento que corresponde ao filtro especificado
db.usuarios.deleteOne({ nome: "João" }); 

// Usando o método deleteMany() para excluir todos os documentos que correspondem ao filtro especificado
db.usuarios.deleteMany({ cidade: "São Paulo" });


// Operadores Lógicos
db.usuarios.find({ $and: [{ idade: { $gte: 18 } }, { cidade: "São Paulo" }] }); // retorna tudo q tenha idade  maior ou igual a 18 e(and) cidade é são paulo

db.usuarios.find({ $or: [{ idade: { $lt: 18 } }, { cidade: "Rio de Janeiro" }] });

db.usuarios.find({ idade: { $not: { $eq: 25 } } });
// $not: negação, inverte o valor

// Operadores de Comparação
db.usuarios.find({ idade: { $eq: 25 } }); // $eq: ==

db.usuarios.find({ idade: { $ne: 30 } }); // $ne: !=

db.usuarios.find({ idade: { $gt: 30 } }); // $gt: >

db.usuarios.find({ idade: { $gte: 30 } }); // $gte: >=
 
db.usuarios.find({ idade: { $lt: 30 } }); // $lt: < 

db.usuarios.find({ idade: { $lte: 30 } }); // $lte: <=

db.usuarios.find({ cidade: { $in: ["São Paulo", "Rio de Janeiro"] } }); //// $in: retorna tudo que estiver dentro das condições de dentro do array

db.usuarios.find({ cidade: { $nin: ["São Paulo", "Rio de Janeiro"] } });// $nin retorna tudo que não for igual a São paulo, Rio de Janeiro

// Projeção
db.usuarios.find({}, { nome: 1, idade: 1 }) // retorna apenas nome e idade 

// Ordenação
db.usuarios.find().sort({ idade: 1 }) // retorna ordenado pela idade em forma crescente, -1 descrescente. 1 crescente. podemos colocar mais ordenações
// exemplo: db.usuarios.find().sort({ idade: 1 , nome: -1(ou 1) }) 
// Limitação
db.usuarios.find().limit(10) // limit retorna aepnas 10
// Paginação
db.usuarios.find().skip(10).limit(5) // define quantas informações retornarão por pagina